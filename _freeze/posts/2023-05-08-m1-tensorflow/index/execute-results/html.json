{
  "hash": "f5864eb8f5751e092d8b27a0f7e7443c",
  "result": {
    "markdown": "---\ntitle: \"Setting up TensorFlow with GPU support on a M1 Macbook Pro\"\ndescription: 'For training small neural networks locally.'\ncategories: [deep learning, process write-up]\nauthor: \"Jacob Eliason\"\ndate: \"2023-05-08\"\ndraft: false\nexecute:\n  freeze: auto  # re-render only when source changes\n---\n\n## Introduction\n\nAs has been noted by [many](https://twitter.com/williamrblack/status/1429962733055881218?s=20) [others](https://twitter.com/MLE_Online/status/1584794484134805504?s=20), Google search results seem to have meaningfully degraded in quality in the last couple of years. Whether this is due to AI content farms or more widespread use of SEO techniques, I sometimes find myself searching through what feels like ever-larger haystacks for increasingly well-disguised needles.\n\nThis was especially true for me last fall after I upgraded my laptop to a M1 Macbook Pro. Setting up a Python environment for TensorFlow with GPU support was surprisingly hard to do despite no shortage of helpful-sounding search results. \n\nAfter getting things up and running and subsequently having helped a couple of my classmates walk through the same process on their computers, I thought I'd write down the steps that worked with my machine.\n\n## Why?\n\nTraining neural networks locally with GPU support is many times faster than training them with a CPU alone.\n\nFor me, this was nice to have last semester while I was taking a deep learning class. I prefer writing code in VS Code over other environments and GPU acceleration made it feasible for me to do most of my coursework there instead of in Google Colab.\n\n## Steps\n\n### 1. Install miniforge or miniconda\n\nI had issues when I tried these steps using Anaconda. I used [miniconda](https://docs.conda.io/en/latest/miniconda.html#macos-installers) in the end.\n\n### 2. Create a `osx-arm64`-native Conda environment\n\nPer this Stack Overflow [answer](https://stackoverflow.com/a/65432861), we'll create a new Conda environment with the `osx-arm64` channel as the default. \n\n```{{bash}}\nCONDA_SUBDIR=osx-arm64 conda create -n native numpy -c conda-forge\nconda activate native \nconda config --env --set subdir osx-arm64\n```\n\nSubsequent steps come from \"Fix #2\" in the following [answer](https://stackoverflow.com/a/75198379).\n\n### 3. Designate the use of the conda-forge channel for package installation\n\n```{{bash}}\nconda config --add channels conda-forge\nconda config --set channel_priority strict \n```\n### 4. Install packages\n\nHere we will install the TensorFlow dependencies and TensorFlow itself with versions as shown below.\n\n```{{bash}}\nconda install -y -c apple tensorflow-deps==2.10.0\npython -m pip install tensorflow-macos==2.10.0\npython -m pip install tensorflow-metal==0.6.0\n```\n\n### 5. Verify proper installation\n\n\n```{bash}\npython --version\nconda list|grep -E '(tensorflow|numpy)'\n```\n\n\nThis portion should yield the following:\n\n```\nPython 3.10.8\nnumpy                     1.23.2          py310h127c7cf_0    conda-forge\ntensorflow-deps           2.10.0                        0    apple\ntensorflow-estimator      2.10.0                   pypi_0    pypi\ntensorflow-macos          2.10.0                   pypi_0    pypi\ntensorflow-metal          0.6.0                    pypi_0    pypi\n```\n\n### 6. Test\n\nAnd that should be it! After completing those steps, the following code should yield a list that includes both a CPU and a GPU.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\ntf.config.list_physical_devices()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'),\n PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}